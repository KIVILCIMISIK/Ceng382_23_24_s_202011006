#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>



void count_characters() {
    FILE *file = fopen(input.txt, "r");
    if (file == NULL) {
        printf("Error opening file");
      
    }

    int count = 0;
    int ch;
    while ((ch = fgetc(file)) != EOF) {
        count++;
    }

    printf("Number of characters: %d\n", count);
    fclose(file);
}

void count_words() {
    FILE *file = fopen(input.txt, "r");
    if (file == NULL) {
        printf("Error opening file");
    }

    int count = 0;
    char word[100];
    while (fscanf(file, "%s", word) != EOF) {
        count++;
    }

    printf("Number of words: %d\n", count);
    fclose(file);
}

void count_lines() {
    FILE *file = fopen(input.txt, "r");
    if (file == NULL) {
        printf("Error opening file");
  
    }

    int count = 0;
    char line[1000];
    while (fgets(line, sizeof(line), file) != NULL) {
        count++;
    }

    printf("Number of lines: %d\n", count);
    fclose(file);
}

int main() {
    pid_t pid1, pid2, pid3;
    int status;

    pid1 = fork();

    if (pid1 == 0) {
        // First child process
        count_characters();
        
    } else if (pid1 < 0) {
        printf("Error forking first child process");
      
    }

    // Parent process
    pid2 = fork();

    if (pid2 == 0) {
        // Second child process 
        count_words();
    } else if (pid2 < 0) {
        printf("Error forking second child process");
        
    }

    // Parent process
    pid3 = fork();

    if (pid3 == 0) {
        // Third child process
        count_lines();
    
    } else if (pid3 < 0) {
        printf("Error forking third child process");
      
    }

    // Parent process waits for all child processes to finish
    waitpid(pid1, &status, 0);
    waitpid(pid2, &status, 0);
    waitpid(pid3, &status, 0);

    return 0;
}